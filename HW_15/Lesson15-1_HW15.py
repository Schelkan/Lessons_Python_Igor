# Створіть клас «Прямокутник», у якого необхідно реалізувати два поля (ширина та висота) та кілька обов'язкових методів:
#
# Метод порівняння прямокутників за площею.
# Метод складання прямокутників (площа сумарного прямокутника повинна дорівнювати сумі площ прямокутників, які ви складаєте).
# Методи множення прямокутника на число n (це має збільшити площу базового прямокутника в n разів).
# У класі можуть бути створені додаткові (допоміжні методи)
#
# Декілька уточнень:
#
# Методи складання, множення, поділу тощо. обов'язково маємо повертати новий екземпляр класу Прямокутник!
# Для множення, додавання, порівняння, обов'язково потрібно перевизначати "магічні" методи. Для множення є вбудований метод mul
# Коли в результаті мат. дій створюєте новий екземпляр класу Прямокутник, то у цього екземпляру, перемноження сторін,
# має давати необхідну площу. Це теж важливо. Тобто, якщо Ви до прямокутника, у якого площа дорівнює 8,
# додаєте інший прямокутник з площею 18, необходимо створити новий прямокутник, площа якого дорівнює 26.
# Площа це довжина, помноженна на висоту. Значить необхідно підібрати сторони вновь створенного прямокутника таким чином,
# щоб вони давали необхідну площу!


class Rectangle:

    def __init__(self, width, height):      # конструктор екземпляру класа - ініціалізація змінних
        self.width = width
        self.height = height

    def get_square(self):                   # модуль розрахунку площі прямокутника
        # print(self.width * self.height)
        return self.width * self.height

    def __eq__(self, other):                # 'магічній' метод порівняння площ
        # return self.width * self.height == other.width * other.height
        return self.get_square() == other.get_square()  # порівняння площ


    def __add__(self, other):               # модуль складання площ прямокутників
        add_square = self.get_square() + other.get_square()  # Обчислює нову площу як суму площ двох прямокутників
        # return Rectangle(new_width, new_height)     # Повертає новий екземпляр класу Rectangle
        return self.new_square(add_square)


    def __mul__(self, n):                   # метод множення площі прямокутника на число 'n'
        mul_square = self.get_square() * n      # Обчислює нову площу як добуток площі прямокутника та числа n
        return self.new_square(mul_square)      # Повертає новий екземпляр класу 'Rectangle' через модуль 'new_square()'

    def new_square(self, new_square):                   # підбір сторон вновь створенyого прямокутника
        num_del = [9, 8, 7, 6, 5, 4, 3, 2, 1]           # масив для пошуку ширини
        new_width = 1                                   # встановлюємо ширину по замовченню
        new_height = new_square                         # встановлюємо висоту по замовченню - дорівнює площі
        for ii in num_del:
            if new_square % ii == 0:                    # пошук ширини (поділ площі без залишку)
                new_width, new_height = ii, int(new_square / ii)    # підібрати нові ширина та висота вновь створенного прямокутника
                # print(str(new_width), str(new_height))
                return Rectangle(new_width, new_height)             # Повертає новий екземпляр класу 'Rectangle'

    def __str__(self):
        print(f"width = {self.width}, height = {self.height}")          # Повертає рядкове представлення прямокутника
        return f"Rectangle(width={self.width}, height={self.height})"   # Повертає рядкове представлення прямокутника



r1 = Rectangle(2, 4)
r2 = Rectangle(3, 6)

assert r1.get_square() == 8, 'Test1'
assert r2.get_square() == 18, 'Test2'

r3 = r1 + r2
r3.__str__()        # для інформації (підбір сторон вновь створенного прямокутника)
assert r3.get_square() == 26, 'Test3'

r4 = r1 * 4
r4.__str__()        # для інформації (підбір сторон вновь створенного прямокутника)
assert r4.get_square() == 32, 'Test4'

assert Rectangle(3, 6) == Rectangle(2, 9), 'Test5'

# =========================
# Додатковий тест
# r1 = Rectangle(6, 5)
# r2 = Rectangle(3, 6)
#
# assert r1.get_square() == 30, 'Test1'
# assert r2.get_square() == 18, 'Test2'
#
# r3 = r1 + r2
# r3.__str__()
# assert r3.get_square() == 48, 'Test3'
#
# r4 = r1 * 4
# r4.__str__()
# assert r4.get_square() == 120, 'Test4'
#
# assert Rectangle(3, 6) == Rectangle(2, 9), 'Test5'
